local KeySystemUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/MaGiXxScripter0/keysystemv2api/master/ui/xrer_mstudio45.lua"))()
KeySystemUI.New({
    ApplicationName = "UruyuHub", -- Your Key System Application Name
    Name = "-Drowned||HUB-", -- Your Script name
    Info = "Get Lifetime key is Temp Discount!!!", -- Info text in the GUI, keep empty for the default text.
    DiscordInvite = "https://discord.com/invite/2AbJGYzWMT", -- Optional.
    AuthType = "clientid" -- Can select verification with ClientId or IP ("clientid" or "ip")
})

-- Wait until the key system UI is finished or closed
repeat
    task.wait()
until KeySystemUI.Finished() or KeySystemUI.Closed

-- Check if the key system UI is finished and not closed by the player
if KeySystemUI.Finished() and not KeySystemUI.Closed then
    print("Key verified, can load script")

    wait(1)

    local repo = 'https://raw.githubusercontent.com/malfume/Linoria/main/'

    local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet(repo .. 'ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet(repo .. 'SaveManager.lua'))()

    -- Set FPS cap
    local fps = 400

    if setfpscap then
        setfpscap(fps)
    end

    local Window = Library:CreateWindow({
        Title = 'Drowned||HUB-  -Blade||Ball .gg/Z3FU9gabKX',
        Center = true,
        AutoShow = true,
        TabPadding = 8,
        MenuFadeTime = 0.2
    })

    local Tabs = {
        Main = Window:AddTab('Main'),
        ['UI Settings'] = Window:AddTab('UI Settings'),
    }

    local MovementGroupBox = Tabs.Main:AddLeftGroupbox('Movement')

    -- Auto Perry Script Integration
    local ballFolder = workspace.Balls
    local indicatorPart = Instance.new("Part")
    indicatorPart.Size = Vector3.new(5, 5, 5)
    indicatorPart.Anchored = true
    indicatorPart.CanCollide = false
    indicatorPart.Transparency = 1
    indicatorPart.BrickColor = BrickColor.new("Bright red")
    indicatorPart.Parent = workspace

    local lastBallPressed = nil
    local isKeyPressed = false
    local autoPerryToggle = false
    local autoPerryKeybind = Enum.KeyCode.H

    local function calculatePredictionTime(ball, player)
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local relativePosition = ball.Position - rootPart.Position
            local velocity = ball.Velocity + rootPart.Velocity 
            local a = (ball.Size.magnitude / 2) 
            local b = relativePosition.magnitude
            local c = math.sqrt(a * a + b * b)
            local timeToCollision = (c - a) / velocity.magnitude
            return timeToCollision
        end
        return math.huge
    end

    local function updateIndicatorPosition(ball)
        if indicatorPart and ball.Position then
            indicatorPart.Position = ball.Position
        end
    end

    local function checkProximityToPlayer(ball, player)
        local predictionTime = calculatePredictionTime(ball, player)
        local realBallAttribute = ball:GetAttribute("realBall")
        local target = ball:GetAttribute("target")
        
        local ballSpeedThreshold = math.max(0.4, 0.6 - ball.Velocity.magnitude * 0.01)

        if autoPerryToggle and predictionTime <= ballSpeedThreshold and realBallAttribute == true and target == player.Name and not isKeyPressed then
            game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.F, false, nil)
            wait(0.005)
            game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.F, false, nil)
            lastBallPressed = ball
            isKeyPressed = true
        elseif lastBallPressed == ball and (predictionTime > ballSpeedThreshold or realBallAttribute ~= true or target ~= player.Name) then
            isKeyPressed = false
        end
    end

    local function checkBallsProximity()
        local player = game.Players.LocalPlayer
        if player then
            for _, ball in pairs(ballFolder:GetChildren()) do
                checkProximityToPlayer(ball, player)
                updateIndicatorPosition(ball)
            end
        end
    end

    local function onPlayerRespawn()
        lastBallPressed = nil
        isKeyPressed = false
    end

    game.Players.LocalPlayer.CharacterAdded:Connect(onPlayerRespawn)

    game:GetService("RunService").Heartbeat:Connect(checkBallsProximity)

    -- UI Keybind Integration
    MovementGroupBox:AddLabel('Auto Perry'):AddKeyPicker('KeyPicker', {
        Default = autoPerryKeybind.Name,
        SyncToggleState = false,
        Mode = 'Toggle',
        Text = 'Auto Perry',
        NoUI = false,
        Callback = function(Value)
            autoPerryToggle = not autoPerryToggle
            print('[cb] Auto Perry toggled:', autoPerryToggle)
        end,
        ChangedCallback = function(New)
            autoPerryKeybind = Enum.KeyCode[New]
            print('[cb] Auto Perry keybind changed to:', autoPerryKeybind.Name)
        end
    })

    local function onKeyPress(input, gameProcessed)
        if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == autoPerryKeybind then
            autoPerryToggle = not autoPerryToggle
            print('Auto Perry toggled:', autoPerryToggle)
        end
    end

    game:GetService("UserInputService").InputBegan:Connect(onKeyPress)

-- Continue with the rest of your script
local function applyFullBright()
    -- Get necessary services
    local Lighting = game:GetService("Lighting")

    -- Set Brightness to a high value
    Lighting.Ambient = Color3.new(1, 1, 1)
    Lighting.Brightness = 2
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 10000
    Lighting.OutdoorAmbient = Color3.new(1, 1, 1)

    -- Optional: Remove shadows for a clearer view
    for _, descendant in pairs(workspace:GetDescendants()) do
        if descendant:IsA("ShadowMap") then
            descendant:Destroy()
        end
    end

    -- Optional: Adjust the time of day for better visibility
    game.Lighting.TimeOfDay = 12 -- Noon

    -- Optional: Disable post-processing effects
    game.Lighting.Changed:Connect(function(property)
        if property == "PostProcessingEffects" then
            game.Lighting.PostProcessingEffects = {}
        end
    end)
end

local WorldViewGroupBox = Tabs.Main:AddLeftGroupbox('WorldView')    

local FullBrightButton = WorldViewGroupBox:AddButton({
    Text = 'Full Bright',
    Func = function()
        -- Print a message when the button is clicked
        print('You clicked Full Bright button!')

        -- Apply Full Bright when the button is clicked
        applyFullBright()
    end,
    DoubleClick = false,
    Tooltip = 'Brighten up the area'
})

local FPSBoostButton = FullBrightButton:AddButton({
    Text = 'Fps Boost',
    Func = function()
        local success, result = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/malfume/Script/main/fps%20boost"))()
        end)

        if not success then
            warn('Error loading FPS boost script:', result)
        end
    end,
    DoubleClick = true,
    Tooltip = 'It will make your game run faster'
})


Library:SetWatermark(('Drowned|| HUB | %s fps | %s ms'):format(60, 0))
Library:SetWatermarkVisibility(true)

Library.KeybindFrame.Visible = true

local FPS = 60 -- Default value for FPS

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    Library:SetWatermark(('Drowned|| HUB | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue() or 0)
    ))
end)

Library:OnUnload(function()
    WatermarkConnection:Disconnect()
    print('Unloaded!')
    Library.Unloaded = true
end)

local MenuGroupBox = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroupBox:AddButton('Unload', function() Library:Unload() end)
MenuGroupBox:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'LeftCtrl', NoUI = true, Text = 'Menu keybind' })

-- Set the library's ToggleKeybind to your desired keybind object
Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:BuildConfigSection(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()

else
    print("Player closed the GUI or failed to verify the key.")
end
